import spacy
sim = spacy.load("en_core_web_lg")
nlp = spacy.load('en_core_web_sm')
txt = "Fractals are complex geometric shapes that exhibit self-similarity at different scales. This means that as you zoom into a fractal, you'll see smaller copies of the overall shape, repeating infinitely. Fractals are not limited to simple shapes like squares or circles; they can have intricate and infinitely detailed patterns.One of the most famous fractals is the Mandelbrot set, discovered by mathematician Benoit Mandelbrot in the 1970s. The Mandelbrot set is generated by iterating a simple mathematical formula and determining whether the resulting sequence remains bounded or tends to infinity. Points within the Mandelbrot set are colored black, while points outside the set are colored based on how quickly they diverge to infinity."

# Alternately a txt file
# path = //content/sample_data
nlp = spacy.load('en_core_web_sm')


import spacy
import numpy as np

# Load the English language model
nlp = spacy.load("en_core_web_sm")
similarity = spacy.load('en_core_web_lg')
# Define the list of topics and the text
topics = ['Physics', 'Chemistry', 'Biology', 'Mathematics', 'Computer Science', 'Medicine', 'Art History', 'Computer Science & Information Technology', 'Law']
txt = "Fractals are complex geometric shapes that exhibit self-similarity at different scales. This means that as you zoom into a fractal, you'll see smaller copies of the overall shape, repeating infinitely. Fractals are not limited to simple shapes like squares or circles; they can have intricate and infinitely detailed patterns. One of the most famous fractals is the Mandelbrot set, discovered by mathematician Benoit Mandelbrot in the 1970s. The Mandelbrot set is generated by iterating a simple mathematical formula and determining whether the resulting sequence remains bounded or tends to infinity. Points within the Mandelbrot set are colored black, while points outside the set are colored based on how quickly they diverge to infinity."

# Process the text to obtain a Doc object
doc = nlp(txt)

"""
input: This is a sunny day. It is very hot today
sentences: string|list
ouput: This is a sunny day.,It is very hot today.,
"""
# Extract sentences from the Doc object
sentences = [sent.text for sent in doc.sents]

# Calculate similarities between each sentence and each topic
"""
similarites: integer|list
"""

def similarity_scores()
  similarities = []
  for sentence in sentences:
      sent_doc = nlp(sentence)
      for topic in topics:
        topic_doc = nlp(topic)
        sim_score = sent_doc.similarity(topic_doc)
  avg_sim_score = np.mean(sim_score)  
  similarities.append((sentence, topic, sim_score))
# Print the similarity scores
for sentence, topic, similarity_score in similarities:
    print(f"Similarity Score: {similarity_score}")

max_score = max(similarities, key=lambda x: x[1])

print(f"Sentence with maximum average similarity score: '{max_score[0]}' | Average Similarity Score: {max_score[1]}")
