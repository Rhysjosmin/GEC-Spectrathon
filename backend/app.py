import json
import chromadb
from flask import Flask, request
from flask_cors import CORS
from time import sleep
from modules.grammer import convert_to_question
from modules.chromadb import similarity_topics
import spacy
from collections import Counter
import numpy as np
import language_tool_python


app = Flask(__name__)
cors = CORS(app)


@app.route("/search")
def searchCourse():
    print('Starting')
    query = request.args.get("query")
    # The user enters the course that he/she want to learn about
    # Checks if the course is present .
    # If present then return the course data/stuff
    # Else ask the user if they want to add a new course
    print('Quering')
    results = collection.query(
        query_texts=["Fractals"],
        n_results=3,
        include=["documents", "distances", "metadatas"],
    )
    print('Queried')
    dist = np.average(results["distances"])
    courses = [
        {
            "question": obj["question"],
            "summary": obj["summary"],
            "answers": obj["answers"],
            "correct": obj["correct"],
        }
        for obj in results["metadatas"][0]
    ]
  
    return {
        "present": dist > 0.3,
        "courses":courses,
    }


@app.route("/createCourse")
def createCourse():

    file = request.files["file"]
    # fileType
    # if file is content read directly else parse properly

    content = "This means that as you zoom into a fractal, you'll see smaller copies of the overall shape, repeating infinitely. Fractals are not limited to simple shapes like squares or circles; they can have intricate and infinitely detailed patterns.One of the most famous fractals is the Mandelbrot set, discovered by mathematician Benoit Mandelbrot in the 1970s. The Mandelbrot set is generated by iterating a simple mathematical formula and determining whether the resulting sequence remains bounded or tends to infinity. Points within the Mandelbrot set are colored black, while points outside the set are colored based on how quickly they diverge to infinity.Fractals have applications in various fields, including mathematics, physics, computer science, and art. In mathematics, fractals provide insights into chaos theory, dynamical systems, and nonlinear dynamics. In physics, fractals are used to model irregular shapes in nature, such as coastlines, clouds, and mountains.Fractal geometry also has practical applications in computer graphics, where it is used to generate realistic-looking terrain, textures, and natural phenomena in video games and visual effects.Additionally, fractals inspire artists and designers with their intricate and mesmerizing patterns, leading to the creation of stunning artworks and architectural designs.The number e is defined as the limit of the expression (1 + 1/n)^n as n approaches infinity. This constant, approximately equal to 2.71828, is a fundamental mathematical constant in calculus and analysis. It appears naturally in many mathematical contexts, including exponential growth and decay, compound interest calculations, probability theory, and the study of continuous change. Its significance stems from its role as the base of the natural logarithm function, ln(x), where e^x represents exponential growth or decay at a rate proportional to the value of x. The number e is also transcendental, meaning it is not the root of any non-zero polynomial equation with rational coefficients."
    doc = nlp(content)
    word_counts = Counter()
    for token in doc:
        if token.pos_.startswith("N") and token.is_alpha:
            word = token.text.lower()
            word_counts[word] += 1

        top_nouns = word_counts.most_common(5)

    sentences = [sent.text for sent in doc.sents]
    sentence_similarities = []

    top_nouns = [token.text for token in doc if token.pos_ == "NOUN"][:5]

    for sentence in sentences:
        sentence_doc = nlp(sentence)
        similarities = [sentence_doc.similarity(nlp(noun)) for noun in top_nouns]
        max_similarity = max(similarities)
        sentence_similarities.append((sentence, max_similarity))

    sentence_similarities.sort(key=lambda x: x[1], reverse=True)

    print("Top 5 Most Similar Sentences are given below:")
    for sentence, similarity in sentence_similarities[:5]:
        print(f"{sentence} (Similarity: {similarity:.2f})")

    for sentence in sentences:
        question = convert_to_question(sentence)
        if question:
            print(f"Converted Question: {question}")
        else:
            del question
    return {"result": "courseID"}


@app.route("/courseData", methods=["GET"])
def courseData():
    Course = {
        "name": "Operating Systems",
        "topics": ["registers", "busses"],
        "code": "OSX034",
    }
    Course["code"] = request.args.get("code")

    return json.dumps(Course)


if __name__ == "__main__":
    topics = [
        "Physics",
        "Chemistry",
        "Biology",
        "Mathematics",
        "Computer Science",
        "Medicine",
        "Art History",
        "Computer Science & Information Technology",
        "Law",
        "Statistics",
    ]
    client = chromadb.PersistentClient(path="public/vector")
    collection = client.get_collection(name="specs")

    nlp = spacy.load("en_core_web_sm")
    app.run(debug=True)
